generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// Representa la tabla `inmuebles` con tipos alineados a MySQL.
///
/// Conversión destacada:
/// - `tinyint(1)` se modela como `Boolean` usando `@db.TinyInt`.
/// - `tinyint unsigned` se modela como `Int` con `@db.UnsignedTinyInt`.
model Inmueble {
  id                    BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  id_asesor             BigInt?             @db.UnsignedBigInt
  asesor_id             BigInt              @db.UnsignedBigInt
  titulo                String              @db.VarChar(200)
  destacado             Boolean             @default(false)
  descripcion           String?             @db.Text
  precio                Decimal             @db.Decimal(12, 2)
  direccion             String              @db.VarChar(255)
  latitud               Decimal?            @db.Decimal(10, 6)
  longitud              Decimal?            @db.Decimal(10, 6)
  colonia               String?             @db.VarChar(255)
  municipio             String?             @db.VarChar(255)
  estado                String?             @db.VarChar(150)
  codigoPostal          String?             @map("codigo_postal") @db.VarChar(10)
  tipo                  inmuebles_tipo
  operacion             inmuebles_operacion
  estatusId             Int                 @default(1) @map("estatus_id") @db.UnsignedTinyInt
  habitaciones          Int?                @default(0) @db.UnsignedTinyInt
  banos                 Int?                @default(0) @db.UnsignedTinyInt
  estacionamientos      Int?                @default(0) @db.UnsignedTinyInt
  metros_cuadrados      Decimal?            @default(0.00) @db.Decimal(10, 2)
  superficie_construida Decimal?            @default(0.00) @db.Decimal(10, 2)
  superficie_terreno    Decimal?            @default(0.00) @db.Decimal(10, 2)
  anio_construccion     Int?                @db.Year
  video_url             String?             @db.VarChar(255)
  tour_virtual_url      String?             @db.VarChar(255)
  amenidades            String?             @db.Text
  extras                String?             @db.Text
  createdAt             DateTime?           @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt             DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  imagenes              InmuebleImagen[]
  users                 users               @relation(fields: [asesor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "inmuebles_ibfk_1")
  estatus               InmuebleEstatus     @relation(fields: [estatusId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inmuebles_ibfk_2")
  asesores              asesores?           @relation(fields: [id_asesor], references: [id], onUpdate: NoAction, map: "inmuebles_id_asesor_foreign")
  intereses             intereses[]

  @@index([asesor_id], map: "asesor_id")
  @@index([estatusId], map: "estatus_id")
  @@index([id_asesor], map: "inmuebles_id_asesor_foreign")
  @@map("inmuebles")
}

/// Catálogo de estatus para los registros de `inmuebles`.
model InmuebleEstatus {
  id          Int        @id @default(autoincrement()) @db.UnsignedTinyInt
  nombre      String     @unique(map: "nombre") @db.VarChar(50)
  descripcion String?    @db.VarChar(150)
  color       String?    @default("#ffffff") @db.VarChar(20)
  orden       Int?       @default(0)
  inmuebles   Inmueble[]

  @@map("inmueble_estatus")
}

/// Imágenes almacenadas para un `Inmueble` con rutas en S3.
model InmuebleImagen {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  disk       String    @default("s3") @db.VarChar(50)
  path       String?   @db.VarChar(255)
  url        String?   @db.VarChar(500)
  metadata   Json?
  inmuebleId BigInt    @map("inmueble_id") @db.UnsignedBigInt
  s3Key      String    @map("s3_key") @db.VarChar(255)
  orden      Int?      @default(0)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  inmueble   Inmueble  @relation(fields: [inmuebleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "inmueble_imagenes_ibfk_1")

  @@index([inmuebleId], map: "inmueble_id")
  @@map("inmueble_imagenes")
}

model asesores {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  nombre     String     @db.VarChar(255)
  email      String     @unique(map: "email") @db.VarChar(255)
  telefono   String?    @db.VarChar(50)
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  inmuebles  Inmueble[]
}

model blogs {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  autor_id   BigInt    @db.UnsignedBigInt
  titulo     String    @db.VarChar(200)
  slug       String    @unique(map: "slug") @db.VarChar(200)
  contenido  String    @db.LongText
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  users      users     @relation(fields: [autor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "blogs_ibfk_1")

  @@index([autor_id], map: "autor_id")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int    @db.UnsignedInt
}

model codigos_postales {
  id               Int     @id @default(autoincrement())
  d_codigo         String  @db.VarChar(5)
  d_asenta         String  @db.VarChar(255)
  d_tipo_asenta    String? @db.VarChar(100)
  d_mnpio          String? @db.VarChar(150)
  d_estado         String? @db.VarChar(150)
  d_ciudad         String  @db.VarChar(255)
  d_CP             String? @db.VarChar(10)
  c_estado         String? @db.VarChar(5)
  c_oficina        String? @db.VarChar(10)
  c_CP             String? @db.VarChar(10)
  c_tipo_asenta    String? @db.VarChar(5)
  c_mnpio          String? @db.VarChar(5)
  id_asenta_cpcons String? @db.VarChar(20)
  d_zona           String? @db.VarChar(20)
  c_cve_ciudad     String? @db.VarChar(10)
}

model comentarios {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  contacto_id BigInt    @db.UnsignedBigInt
  comentario  String    @db.Text
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  contactos   contactos @relation(fields: [contacto_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comentarios_ibfk_1")

  @@index([contacto_id], map: "contacto_id")
}

model contactos {
  id          BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  nombre      String            @db.VarChar(100)
  email       String            @db.VarChar(150)
  telefono    String            @db.VarChar(20)
  estado      contactos_estado? @default(nuevo)
  fuente      String?           @default("Web") @db.VarChar(50)
  created_at  DateTime?         @default(now()) @db.Timestamp(0)
  updated_at  DateTime?         @db.Timestamp(0)
  comentarios comentarios[]
  intereses   intereses[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model intereses {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  contacto_id BigInt    @db.UnsignedBigInt
  inmueble_id BigInt    @db.UnsignedBigInt
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  contactos   contactos @relation(fields: [contacto_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "intereses_ibfk_1")
  inmuebles   Inmueble  @relation(fields: [inmueble_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "intereses_ibfk_2")

  @@unique([contacto_id, inmueble_id], map: "contacto_inmueble_unique")
  @@index([inmueble_id], map: "inmueble_id")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
}

model role_user {
  user_id BigInt @db.UnsignedBigInt
  role_id BigInt @db.UnsignedBigInt
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_user_ibfk_1")
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_user_ibfk_2")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_id")
}

model roles {
  id        BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  nombre    String      @unique(map: "nombre") @db.VarChar(50)
  role_user role_user[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int
  users         users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_user_id_foreign")

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model users {
  id             BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  name           String      @db.VarChar(100)
  email          String      @unique(map: "email") @db.VarChar(150)
  password       String      @db.VarChar(255)
  remember_token String?     @db.VarChar(100)
  created_at     DateTime?   @default(now()) @db.Timestamp(0)
  updated_at     DateTime?   @default(now()) @db.Timestamp(0)
  blogs          blogs[]
  inmuebles      Inmueble[]
  role_user      role_user[]
  sessions       sessions[]
}

enum contactos_estado {
  nuevo
  en_contacto
  convertido
}

enum inmuebles_tipo {
  Departamento
  Casa
  Oficina
  Local_Comercial @map("Local Comercial")
  Terreno
  Bodega
}

enum inmuebles_operacion {
  Renta
  Venta
}
